{"version":3,"sources":["App.module.css","App.js","serviceWorker.js","index.js"],"names":["module","exports","timeNames","earlyMorning","morning","noon","afternoon","evening","night","timeFrames","moment","set","hour","minute","second","now","getTimeFrame","curTime","miliseconds","difference","diff","theme","colorSets","getColorSet","timeFrame","backgroundPositionsMap","Time","currentTimeFrame","colors","onTimeFrameChanged","useState","time","setTime","setTimeFrame","useEffect","timer","setTimeout","clearTimeout","newTimeFrame","style","color","textShadow","format","baseStyle","backgroundSize","animation","App","initialTime","colorSet","updateColorSet","gradient","colorsSet","Math","floor","random","length","com","i","getGradient","background","className","styles","title","subtitle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8720fde0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__-GfWs\",\"subtitle\":\"App_subtitle__2-DpX\"};","import React, { useEffect, useState } from 'react';\nimport moment from 'moment';\nimport './App.css';\nimport styles from './App.module.css';\n\nconst timeNames = {\n  earlyMorning: 'earlyMorning',\n  morning: 'morning',\n  noon: 'noon',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night',\n}\n\nconst timeFrames = {\n  [timeNames.earlyMorning]: () => moment().set({hour: 7, minute: 0, second: 0}),\n  [timeNames.morning]: () => moment().set({hour: 9, minute: 0, second: 0}),\n  [timeNames.noon]: () => moment().set({hour: 12, minute: 0, second: 0}),\n  [timeNames.afternoon]: () => moment().set({hour: 14, minute: 0, second: 0}),\n  [timeNames.evening]: () => moment().set({hour: 17, minute: 0, second: 0}),\n  [timeNames.night]: () => moment().set({hour: 22, minute: 0, second: 0}),\n  [timeNames.now]: () => moment(),\n}\n\nconst getTimeFrame = (curTime) => {\n  const noon = moment().set({hour: 12, minute: 0, second: 0, miliseconds: 0});\n  const difference = curTime.diff(noon, 'hours');\n\n  if (difference >= -4 && difference < -3){\n    return timeNames.earlyMorning;\n  }\n\n  if (difference >= -3 && difference < 0) {\n    return timeNames.morning;\n  }\n\n  if (difference >=0 && difference < 2) {\n    return timeNames.noon;\n  }\n\n  if (difference >=2 && difference < 7) {\n    return timeNames.afternoon;\n  }\n\n  if (difference >=7 && difference < 9) {\n    return timeNames.evening;\n  }\n\n  return timeNames.night;\n}\n\nconst theme = {\n  colorSets: {\n    [timeNames.earlyMorning]:[\n      [\"#ddd6f3\",\"#faaca8\",]\n    ],\n    [timeNames.morning]: [\n      [\"#06beb6\",\"#48b1bf\",],\n      [\"#4ca1af\",\"#c4e0e5\",],\n    ],\n    [timeNames.noon]: [\n      [\"#eacda3\",\"#eacda3\",],\n      [\"#ff5f6d\",\"#ffc371\",],\n    ],\n    [timeNames.afternoon]: [\n      [\"#eacda3\",\"#eacda3\",],\n      [\"#ff5f6d\",\"#ffc371\",],\n      [\"#eacda3\",\"#d6ae7b\",],\n    ],\n    [timeNames.evening]: [\n      [\"#ff7e5f\", \"#feb47b\",],\n      [\"#ed4264\", \"#ffedbc\",],\n      [\"#ff9966\", \"#ff5e62\",],\n    ],\n    [timeNames.night]: [\n      ['#42275a','#734b6d',],\n      ['#614385','#614385',],\n    ],\n  },\n};\n\nconst getColorSet = (timeFrame) => theme.colorSets[timeFrame];\n\nconst backgroundPositionsMap = [\n  [0,0],\n  [100,0],\n  [0, 100],\n  [100,100],\n]\n\nconst getGradient = (colorsSet) => {\n  const selection = Math.floor(Math.random() * colorsSet.length)\n  const colors = colorsSet[selection];\n  var gradient = \"\";\n  var com = \" \";\n  for (var i = 0; i < backgroundPositionsMap.length; i++) {\n    const color = colors[Math.floor(Math.random() * colors.length)];\n    if (i < backgroundPositionsMap.length - 1) {\n      com = \", \";\n    } else {\n      com = \" \";\n    }\n    var gradString =\n      \"radial-gradient(farthest-side at \" +\n      backgroundPositionsMap[i][0] +\n      \"% \" +\n      backgroundPositionsMap[i][1] +\n      \"%,\"+ color + \"FF,\"+ color + \"44 55%)\" +\n      com;\n\n    gradient = gradient + gradString;\n  }\n  return gradient;\n}\n\nconst Time = ({currentTimeFrame, colors, onTimeFrameChanged}) => {\n\n  // FIXME try to fine a way to avoid callimg moment on every tick (?)\n  const [time, setTime] = useState(moment());\n  const [timeFrame, setTimeFrame] = useState(currentTimeFrame);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTime(moment());\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, [time]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      const newTimeFrame = getTimeFrame(time);\n      if(newTimeFrame !== timeFrame){\n        setTimeFrame(newTimeFrame);\n        onTimeFrameChanged(newTimeFrame);\n      }\n    }, 30 * 60 * 1000);\n    return () => clearTimeout(timer);\n  }, [time, timeFrame, onTimeFrameChanged]);\n\n  return <div style={{color: colors[0], textShadow: `5px 5px ${colors[1]}`, }}>{time.format('HH:mm:ss')}</div>\n}\n\nconst baseStyle = { backgroundSize: \"400% 400%\", animation: \"BackgroundAnimation 6s linear infinite\", };\n\nfunction App() {\n  const initialTime = timeFrames[timeNames.now]();\n  const currentTimeFrame = getTimeFrame(initialTime);\n  const [colorSet, updateColorSet] = useState(() => getColorSet(currentTimeFrame));\n  const gradient = getGradient(colorSet);\n  const style = { background: gradient, ...baseStyle, };\n\n  const selection = Math.floor(Math.random() * colorSet.length)\n  const colors = colorSet[selection];\n\n  return (\n    <div className=\"App\" style={style}>\n      <div className={styles.title}>時間の色</div>\n      <div className={styles.subtitle}>What colour is time?</div>\n      <Time\n        currentTimeFrame={currentTimeFrame}\n        colors={colors}\n        onTimeFrameChanged={(timeFrame) => updateColorSet(getColorSet(currentTimeFrame))}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}